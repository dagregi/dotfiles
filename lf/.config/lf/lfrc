set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 8
set cursorpreviewfmt "\033[7;2m"
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set autoquit true
set sixel true
set previewer "~/.config/lf/lfpreviewer"
set cleaner "~/.config/lf/lfcleaner"
set preview

map <enter> shell
map ` !true
map . set hidden!
map x $$f
map X !$f
map o open "$f"
map a push :mkdir<space>

map r
map i rename
map I :rename; cmd-home
map A :rename; cmd-end
map c :rename; cmd-delete-home
map C :rename; cmd-end; cmd-delete-home
map R bulk-rename

map D delete
map g top
map E extract
map <c-r> reload
map <c-t> push :tar<space>
map <c-x> push :zip<space>
map J move-parent down
map K move-parent up

cmd mkdir $mkdir -p "$@"
cmd move-parent &{{
	dironly="setlocal '$(dirname "$PWD")' dironly"
	lf -remote "send $id :updir; $dironly true; $1; $dironly false; open"
}}
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
		image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
		image/svg+xml) display -- $f ;;
		image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
			setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
				[ -z "$file" ] && continue
				lf -remote "send select \"$file\""
				lf -remote "send toggle"
			done &
			;;
		audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
		video/*) setsid -f mpv --ao=pulse $f -quiet >/dev/null 2>&1 ;;
		application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
		application/pgp-encrypted) $EDITOR $fx ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}
cmd bulk-rename ${{
	old="$(mktemp)"
	new="$(mktemp)"
	if [ -n "$fs" ]; then
		fs="$(basename -a $fs)"
	else
		fs="$(ls)"
	fi
	printf '%s\n' "$fs" >"$old"
	printf '%s\n' "$fs" >"$new"
	$EDITOR "$new"
	[ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
	paste "$old" "$new" | while IFS= read -r names; do
		src="$(printf '%s' "$names" | cut -f1)"
		dst="$(printf '%s' "$names" | cut -f2)"
		if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
			continue
		fi
		mv -- "$src" "$dst"
	done
	rm -- "$old" "$new"
	lf -remote "send $id unselect"
}}
cmd delete ${{
	clear; tput setaf 1; tput bold
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf -- $fx
}}
cmd extract ${{
	clear; tput setaf 2; tput bold
    set -f
    printf "$fx\n"
	printf "extract?[y/n]"
	read ans
	[ $ans = "y" ] && {
		case $f in
			*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjf $f;;
		*.tar.gz|*.tgz) tar xzf $f;;
		*.tar.xz|*.txz) tar xJf $f;;
		*.zip) unzip $f;;
		*.rar) unrar x $f;;
		*.7z) 7z x $f;;
		esac
	}
}}
cmd tar ${{
	clear; tput setaf 3; tput bold
    set -f
    printf "$fx\n"
	printf "compress(with tar)?[y/n]"
	read ans
	[ $ans = "y" ] && mkdir $1 && cp -r $fx $1 && tar czf $1.tar.gz $1 && rm -rf $1
}}
cmd zip ${{
	clear; tput setaf 3; tput bold
    set -f
    printf "$fx\n"
	printf "compress(with zip)?[y/n]"
	read ans
	[ $ans = "y" ] && mkdir $1 && cp -r $fx $1 && zip -r $1.zip $1 && rm -rf $1
}}
